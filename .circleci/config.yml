defaults: &defaults
  shell: /bin/bash --login -eo pipefail
  environment:
    # Customize the JVM maximum heap limit
    JVM_OPTS: -Xmx3200m
    TERM: dumb

_run:
  install-tools: &install-tools
    name: Install tools
    command: |
      echo "Install EB CLI"
      sudo apt update
      sudo apt install python-pip
      pip install --upgrade --user "urllib3==1.22" awscli
      pip install awsebcli --upgrade --user
      echo 'export PATH=$HOME/.local/bin:$PATH' >> $HOME/.bash_rc
      source $HOME/.bash_rc
      eb --version
      echo "Install Terragrunt"
      export USER=circleci
      sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
      test -d ~/.linuxbrew && PATH="$HOME/.linuxbrew/bin:$HOME/.linuxbrew/sbin:$PATH"
      test -d /home/linuxbrew/.linuxbrew && PATH="/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:$PATH"
      test -r ~/.bash_profile && echo "export PATH='$(brew --prefix)/bin:$(brew --prefix)/sbin'":'"$PATH"' >>~/.bash_profile
      echo "export PATH='$(brew --prefix)/bin:$(brew --prefix)/sbin'":'"$PATH"' >>~/.profile
      brew install terragrunt

build-common: &build-common
  machine:
    docker_layer_caching: true
    image: circleci/classic:latest
  <<: *defaults
  steps:
    - run: *install-tools

    - checkout

    # Download and cache dependencies
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "build.gradle" }}
        # fallback to using the latest cache if no exact match is found
        - v1-dependencies-

    - run: ./gradlew clean dependencies

    - run: ./gradlew compileTestJava

    - save_cache:
        paths:
        - ~/.gradle/caches
        - ~/.gradle/wrapper
        - /caches/app.tar
        key: v1-dependencies-{{ checksum "build.gradle" }}

    - run:
        name: make test
        command: |
          set -e
          export AWS_ACCESS_KEY_ID=anything_for_localstack
          export AWS_SECRET_ACCESS_KEY=anything_for_localstack
          export AWS_DEFAULT_REGION=us-west-2
          export AWS_CBOR_DISABLE=1
          make test

    - run: echo "ENVIRONMENT_NAME=${ENVIRONMENT_NAME}"

    - store_test_results:
        path: ~/build/test-results/test


version: 2
jobs:
  build-deploy-dev:
    environment:
      - ENVIRONMENT_NAME: dev
    <<: *build-common

  build-deploy-prod:
    environment:
      - ENVIRONMENT_NAME: prod
    <<: *build-common



workflows:
  version: 2
  build-and-deploy:
    jobs:
    - build-deploy-dev:
        filters:
          branches:
            only:
            - develop
    - approve-build-deploy-prod:
        type: approval # DO NOT REMOVE THIS
        filters:
          branches:
            only:
              - master
    - build-deploy-prod:
        requires:
            - approve-build-deploy-prod
        filters:
          branches:
            only:
              - master

